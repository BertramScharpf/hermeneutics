#!/usr/bin/env ruby

#
#  hermesmail  --  Mail filtering and delivery
#

begin
  require "appl"
rescue LoadError
  raise "This requires the Gem 'appl'."
end

require "hermeneutics/version"
require "hermeneutics/mail"


module Hermeneutics

  class Processed < Mail

    attr_accessor :debug

    class Done < Exception ; end

    # Do nothing, just finish.
    def done
      raise Done
    end

    alias delete done

    # Save in a local mailbox
    def deposit mailbox = nil
      save mailbox
      done
    end

    # Forward by SMTP
    def forward_smtp to
      send nil, to
      done
    end

    # Forward by sendmail
    def forward_sendmail to
      sendmail to
      done
    end
    alias forward forward_smtp


    @failed_process = "=failed-process"
    @failed_parse   = "=failed-parse"

    class <<self
      attr_accessor :failed_process, :failed_parse
      def process input, debug = false
        i = parse input
        i.debug = debug
        i.execute
      rescue
        raise if debug
        log_exception "Error while parsing mail"
        b = box @failed_parse
        log :INF, "Saving to", b.path
        b.store_raw input, nil, nil
      end
      def log_exception msg, *args
        log :ERR, "#{msg}: #$! (#{$!.class})", *args
        $!.backtrace.each { |b| log :INF, "    #{b}" }
      end
    end

    def execute
      process
      save
    rescue Done
    rescue
      raise if @debug
      log_exception "Error while processing mail"
      b = self.class.box self.class.failed_process
      save b
    end

    def log_exception msg, *args
      self.class.log_exception msg, *args
    end

  end


  class Fetch

    class <<self

      private :new
      def create *args, &block
        @list = []
        class_eval *args, &block
        new @list
      ensure
        @list = nil
      end

      def pop *args, **kwargs
        access Pop, *args, **kwargs do yield end
      end
      def login *args
        @access[ :logins].push args
        nil
      end

      private
      def access type, *args, **kwargs
        @access and raise "Access methods must not be nested."
        @access = { type: type, args: args, kwargs: kwargs, logins: [] }
        yield
        @list.push @access
        nil
      ensure
        @access = nil
      end

    end

    def initialize list
      @list = list
    end

    def each
      @list.each { |a|
        c = a[ :type].new *a[ :args], **a[ :kwargs]
        a[ :logins].each { |l|
          c.login *l do yield c end
        }
      }
    end

    class Keep < Exception ; end

    private


    class Pop

      def initialize host, port = nil, ssl: nil
        if not port and host =~ /:(\d+)\z/ then
          host, port = $`, $1.to_i
        end
        @host, @port, @ssl = host, port, ssl
      end

      def login user, password
        require "hermeneutics/cli/pop3"
        Cli::POP3.open @host, @port, ssl: @ssl do |pop|
          @user, @password, @pop = user, password, pop
          @pop.authenticate @user, @password
          yield
        end
      ensure
        @user, @password, @pop = nil, nil, nil
      end

      def name
        @user or raise "Not logged in."
        r = "#@user@#@host"
        r << ":#@port" if @port
        r
      end

      def count
        c, = @pop.stat
        c
      end

      def each
        @pop.list.each { |k,|
          text = @pop.retr k
          begin
            yield text
            raise "NOCH IN ENTWICKLUNG!"
            dele k
          rescue Keep
          end
        }
      end

    end

  end


  class MailApp < Application

    NAME      = "hermesmail"
    VERSION   = Hermeneutics::VERSION
    SUMMARY   = "A mail delivery agent written in Ruby"
    COPYRIGHT = Hermeneutics::COPYRIGHT
    LICENSE   = Hermeneutics::LICENSE
    AUTHORS   = Hermeneutics::AUTHORS

    DESCRIPTION = <<~EOT
      This mail delivery agent (MDA) reads a configuration file
      that is plain Ruby code. See the examples section for how
      to write one.
    EOT

    attr_accessor :rulesfile, :mbox, :fetchfile
    attr_bang :debug, :fetch, :keep
    def quiet! ; @quiet += 1 ; end

    def initialize *args
      @quiet = 0
      super
      $*.concat @args   # make them $<-able again
      @args.clear
    end

    RULESFILE = "~/.hermesmail-rules"
    FETCHFILE = "~/.hermesmail-fetch"

    define_option "r", :rulesfile=, "NAME", RULESFILE, "filtering rules"
    alias_option  "r", "rulesfile"

    define_option "M", :mbox=, "MBOX",
                         "process all in MBOX instead of one from stdin"
    alias_option  "M", "mbox"

    define_option "f", :fetch!,                "fetch from a POP server"
    alias_option  "f", "fetch"

    define_option "F", :fetchfile=, "FILE", FETCHFILE,
                         "a PGP-encrypted file containing fetch methods"
    alias_option  "F", "fetchfile"
    alias_option  "F", "fetch-file"

    define_option "k", :keep!,    "don't delete the mails on the server"
    alias_option  "k", "keep"

    define_option "q", :quiet!,
                     "less output (once = no progress, twice = nothing)"
    alias_option  "q", "quiet"

    define_option "g", :debug!,               "full Ruby error messages"
    alias_option  "g", "debug"

    define_option "h", :help,                             "show options"
    alias_option  "h", "help"
    define_option "V", :version,                          "show version"
    alias_option  "V", "version"

    def run
      Processed.class_eval read_rules
      if @mbox and @fetch then
        raise "Specify either mbox or fetch but not both."
      end
      if @mbox then
        b = Box.find @mbox
        b.each { |m| Processed.process m }
      elsif @fetch then
        read_fetches.each { |s|
          c = s.count
          puts "#{c} Mails in #{s.name}." if @quiet < 2
          i = 0
          s.each { |m|
            print "\r#{i}/#{c}  " if @quiet < 1
            i += 1
            Processed.process m
            raise Fetch::Keep if @keep
          }
          puts "\rDone.     " if @quiet < 1
        }
      else
        msg = $<.read
        msg.force_encoding Encoding::ASCII_8BIT
        Processed.process msg, @debug
      end
    end

    private

    def read_rules
      r = File.expand_path @rulesfile
      File.read r
    end

    def read_fetches
      p = File.expand_path @fetchfile
      Fetch.create `gpg -d #{p}`
    end

  end

  MailApp.run

end

